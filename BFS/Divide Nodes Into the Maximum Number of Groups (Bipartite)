class Solution {
    public boolean isBipartite(List<List<Integer>> adjList, int node, int[] colors){
        for(int nbr : adjList.get(node)){
            if(colors[nbr] == colors[node]) return false;
            if(colors[nbr] != -1) continue;

            colors[nbr] = (colors[node]+1) % 2;

            if(!isBipartite(adjList,nbr,colors)){
                return false;
            }
        }
        return true;
    }
    public int getLongestShortestPath(List<List<Integer>> adjList, int src, int n){
        Queue<Integer> que = new LinkedList<Integer>();
        boolean[] visited = new boolean[n];

        que.add(src);
        visited[src] = true;
        int distance = 0;
        while(!que.isEmpty()){
            int size = que.size();
            for(int i=0;i<size;i++){
                int currNode = que.poll();
                for(int nbr : adjList.get(currNode)){
                    if(visited[nbr]) continue;
                    visited[nbr] = true;
                    que.add(nbr);
                }
            }
            distance++;
        }
        return distance;
    }
    public int getTotalGrps(List<List<Integer>> adjList, int node, int[] distances, boolean[] visited){
        int maxi = distances[node];
        visited[node] = true;

        for(int nbr : adjList.get(node)){
            if(visited[nbr]) continue;
            maxi = Math.max(maxi,getTotalGrps(adjList,nbr,distances,visited));
        }
        return maxi;
    }
    public int magnificentSets(int n, int[][] edges) {
        List<List<Integer>> adjList = new ArrayList<>(n);
        for(int i=0;i<n;i++){
            adjList.add(new ArrayList<>());
        }
        for(int arr[] : edges){
            int first = arr[0];
            int second = arr[1];

            adjList.get(first-1).add(second-1);
            adjList.get(second-1).add(first-1);
        }
        int[] colors = new int[n];
        Arrays.fill(colors,-1);

        for(int i=0;i<n;i++){
            if(colors[i] != -1) continue;
            colors[i] = 0;
            
            if(!isBipartite(adjList,i,colors)) return -1;
        }

        int[] distances = new int[n];
        for(int i=0;i<n;i++){
            distances[i] = getLongestShortestPath(adjList,i,n);
        }

        int maxNum = 0;
        boolean[] visited = new boolean[n];
        for(int i=0;i<n;i++){
            if(visited[i]){
                continue;
            }
            maxNum += getTotalGrps(adjList,i,distances,visited);
        }

        return maxNum;
    }
}
