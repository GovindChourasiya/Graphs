class Solution {
    public void bfs(int i, int j, char[][] grid, boolean[][] visited){
        int m = grid.length;
        int n = grid[0].length;

        Queue<int[]> que = new LinkedList<>();
        que.add(new int[]{i,j});
        visited[i][j] = true;

        int numRows[] = {1,-1,0,0};
        int numCols[] = {0,0,1,-1};

        while(!que.isEmpty()){
            int cell[] = que.poll();
            int row = cell[0];
            int col = cell[1];

            for(int k=0;k<4;k++){
                int newRow = row + numRows[k];
                int newCol = col + numCols[k];

                if(newRow >= 0  && newRow < m && newCol >= 0 && newCol < n && !visited[newRow][newCol] && grid[newRow][newCol] != '0' ){
                    que.add(new int[]{newRow,newCol});
                    visited[newRow][newCol] = true;
                }
            }
        }
    }
    public int numIslands(char[][] grid) {
        int m = grid.length;
        int n = grid[0].length;

        boolean visited[][] = new boolean[m][n];
        int countIsland = 0;

        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(!visited[i][j] && grid[i][j] == '1'){
                    countIsland++;
                    bfs(i,j,grid,visited);
                }
            }
        }
        return countIsland;
    }
}
