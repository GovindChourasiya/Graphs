class Solution {
    public int dfs(int i, int j, int[][] grid, boolean[][] visited){
        int m = grid.length;
        int n = grid[0].length;
        if(i < 0 || j < 0 || i >= m || j >= n || visited[i][j] || grid[i][j] == 0){
            return 0;
        }
        visited[i][j] = true;

        return (1 + dfs(i+1,j,grid,visited)+dfs(i-1,j,grid,visited)+dfs(i,j+1,grid,visited)+dfs(i,j-1,grid,visited));
    }
    public int maxAreaOfIsland(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;

        boolean visited[][] = new boolean[m][n];

        int maxArea = 0;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j] == 1 && !visited[i][j]){
                    maxArea = Math.max(maxArea,dfs(i,j,grid,visited));
                }
            }
        }
        return maxArea;
    }
}
