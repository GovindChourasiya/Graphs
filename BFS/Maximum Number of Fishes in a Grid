class Solution {
    public int countHelper(int i, int j, int[][] grid, boolean[][] visited){
        int m = grid.length;
        int n = grid[0].length;

        int result = 0;
        Queue<int[]> que = new LinkedList<>();
        visited[i][j] = true;
        que.add(new int[]{i,j});

        int numRows[] = {0,-1,1,0};
        int numCols[] = {1,0,0,-1};

        while(!que.isEmpty()){
            int cell[] = que.poll();
            int row = cell[0];
            int col = cell[1];
            result += grid[row][col];
            for(int k=0;k<4;k++){
                int newRow = row + numRows[k];
                int newCol = col + numCols[k];

                if(newRow >= 0 && newRow < m && newCol >= 0 && newCol < n && !visited[newRow][newCol] && grid[newRow][newCol] != 0){
                    que.add(new int[]{newRow,newCol});
                    visited[newRow][newCol] = true;
                }
            }
        }
        return result;
    }
    public int findMaxFish(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;

        boolean[][] visited = new boolean[m][n];
        int maxFish = 0;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(!visited[i][j] && grid[i][j] != 0){
                    maxFish = Math.max(maxFish,countHelper(i,j,grid,visited));
                }
            }
        }
        return maxFish;
    }
}
