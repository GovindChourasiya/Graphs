class Solution {
    public boolean isConnectedDfs(int src, int dest, List<List<Integer>> adjList, boolean[] vis) {
        vis[src] = true;

        if (src == dest) {
            return true;
        }
        for (int nbr : adjList.get(src)) {
            if (!vis[nbr]) {
                if (isConnectedDfs(nbr, dest, adjList, vis)) {
                    return true;
                }
            }
        }
        return false;
    }

    public int[] findRedundantConnection(int[][] edges) {
        int n = edges.length;
        List<List<Integer>> adjList = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            adjList.add(new ArrayList<>());
        }

        for (int[] arr : edges) {
            boolean[] vis = new boolean[n];
            int src = arr[0] - 1;
            int dest = arr[1] - 1;

            if (isConnectedDfs(src, dest, adjList, vis)) {
                return new int[]{arr[0], arr[1]};
            }

            adjList.get(src).add(dest);
            adjList.get(dest).add(src);
        }

        return new int[]{};
    }
}
