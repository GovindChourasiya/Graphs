import java.util.*;
import java.util.LinkedList;
import java.util.Queue;

class Graph{
    int vertices;
    List<List<Integer>> adjList;

    public Graph(int vertices){
        this.vertices = vertices;
        adjList = new ArrayList<>();
        for(int i=0;i<vertices;i++){
            adjList.add(new ArrayList<>());
        }

    }

    public void addEdge(int src, int dest, boolean bidir){
        adjList.get(src).add(dest);
        if(bidir){
            adjList.get(dest).add(src);
        }
    }
    public void addEdge(int src, int dest){
        addEdge(src, dest, true);
    }

    public void printAdjList(){
        for(int i=0;i<vertices;i++){
            System.out.print(i+" -> ");
            for(int node : adjList.get(i)){
                System.out.print(node+" ");
            }
            System.out.println();
        }
    }

    public void bfs(int src, int dest){
        int[] visited = new int[vertices];
        int[] dist = new int[vertices];
        int[] parent = new int[vertices];

        Arrays.fill(dist,Integer.MAX_VALUE);
        Arrays.fill(parent,-1);
        Arrays.fill(visited,-1);
        Queue<Integer> que = new LinkedList<>();
        que.add(src);
        parent[src] = src;
        dist[src] = 0;
        visited[src] = 1;
        while(!que.isEmpty()){
            int node = que.poll();
            System.out.print(node+" ");

            for(int nbr : adjList.get(node)){
                if(visited[nbr] == -1){
                    que.add(nbr);
                    visited[nbr] = 1;
                    parent[nbr] = node;
                    dist[nbr] = dist[node]+1;
                }
            }
        }
        System.out.println();
        // Printing the shortest path
        for(int i=0;i<vertices;i++){
            System.out.println("Shortest path from "+i+" is : "+dist[i]);
        }

        // Path from src to dest;
        System.out.println("Path from "+src+" to "+dest);
        List<Integer> path = new ArrayList<>();
        int temp = dest;
        while(parent[temp] != temp){
            path.add(temp);
            temp = parent[temp];
        }
        path.add(temp);
        Collections.reverse(path);
        for(int nodes : path){
            System.out.print(nodes+" ");
        }
        System.out.println();
    }
}
public class Graph_Winter {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int v = sc.nextInt();
        Graph obj = new Graph(v);
        obj.addEdge(0, 1);
        obj.addEdge(1, 2);
        obj.addEdge(1,3);
        obj.addEdge(2,3);
        obj.addEdge(3, 4);
        obj.addEdge(4,5 );
        obj.addEdge(2, 5);
        
        obj.printAdjList();
        obj.bfs(1, 5);
    }
}
